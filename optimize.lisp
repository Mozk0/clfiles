(DECLAIM (OPTIMIZE (SPEED 3) (SAFETY 0) (COMPILATION-SPEED 0) (SPACE 0) (DEBUG 0)))

(EVAL-WHEN (:COMPILE-TOPLEVEL)
  (USE-PACKAGE :USER-DEFINED-MACRO))

(DEFMACRO LOCALLY-OPTIMIZE (OPTIMIZE-OPTIONS &BODY BODY)
  `(LOCALLY (DECLARE (OPTIMIZE ,@OPTIMIZE-OPTIONS))
     ,@BODY))

(DEFUN/TYPE
    FIB    (N)
    FIXNUM ((INTEGER 0 42))
  (DO/TYPE ((FIXNUM I      0 (1+ I))
            (FIXNUM A<N+1> 1 (+ A<N> A<N+1>))
            (FIXNUM A<N>   0 A<N+1>))
      ((= I N) A<N>)))

(DEFUN/TYPE
    RANDOM-IN           (FROM   TO)
    (INTEGER 0 1000000) (FIXNUM FIXNUM)
  "return random number x such that from <= x < to."
  (THE (INTEGER 0 1000000)
    (+ (RANDOM (THE (INTEGER 0 1000000) (- TO FROM))) FROM)))

(DEFMACRO SWAPF (A B)
  `(PSETF ,A ,B ,B ,A))

(DEFUN MAKE-SAMPLE-ARRAY (N)
  (DECLARE (FIXNUM N))
  (LET ((ARRAY (MAKE-ARRAY N :ELEMENT-TYPE 'FIXNUM)))
    (LOOP :FOR I :OF-TYPE FIXNUM :FROM 0 :UPTO (1- N)
       :DO (SETF (AREF ARRAY I)
                 (RANDOM MOST-POSITIVE-FIXNUM)))
    ARRAY))

(DECLAIM (INLINE PARTITION))

(DEFMACRO SWAP (A B)
    `(PROGN (SETF TMP ,A
                  ,A  ,B
                  ,B  TMP)))

(DEFUN/TYPE
    PARTITION (ARRAY                     FROM   TO)
    FIXNUM    ((SIMPLE-ARRAY FIXNUM (*)) FIXNUM FIXNUM)
  (LET/TYPE ((FIXNUM PIVOT-INDEX (RANDOM-IN FROM TO))
             (FIXNUM I           FROM)
             (FIXNUM J           FROM)
             (FIXNUM TMP 0))
    (DECLARE (DYNAMIC-EXTENT I J TMP))
    (LET ((PIVOT (AREF ARRAY PIVOT-INDEX)))
      (SWAP (AREF ARRAY PIVOT-INDEX) (AREF ARRAY (1- TO)))
      (WHILE-LOOP (< I (1- TO))
        (WHEN (< (AREF ARRAY I) PIVOT)
          (SWAP (AREF ARRAY J) (AREF ARRAY I))
          (INCF J))
        (INCF I))
      (SWAP (AREF ARRAY (1- TO)) (AREF ARRAY J))
      (RETURN-FROM PARTITION J))))

(DEFUN/TYPE
    QUICKSORT-IN (ARRAY                     FROM   TO)
    NULL         ((SIMPLE-ARRAY FIXNUM (*)) FIXNUM FIXNUM)
  (TAIL-RECUR RECUR ((FROM FROM) (TO TO))
    (UNLESS (<= (- TO FROM) 1)
      (LET/TYPE ((FIXNUM PIVOT-INDEX (PARTITION ARRAY FROM TO)))
        (IF (> (- TO PIVOT-INDEX)
               (- PIVOT-INDEX FROM))
            (PROGN (QUICKSORT-IN ARRAY (1+ PIVOT-INDEX) TO)
                   (RECUR FROM PIVOT-INDEX))
            (PROGN (QUICKSORT-IN ARRAY FROM PIVOT-INDEX)
                   (RECUR (1+ PIVOT-INDEX) TO)))
        NIL))))

(DEFUN/TYPE
    QUICKSORT (ARRAY)
    NULL      ((SIMPLE-ARRAY FIXNUM (*)))
  (QUICKSORT-IN ARRAY 0 (LENGTH ARRAY)))

;; (DEFUN QUICKSORT (ARRAY)
;;   (QUICKSORT-IN ARRAY 0 (LENGTH ARRAY)))

;; (DEFUN PARTITION (ARRAY FROM TO)
;;   (MACROLET ((SWAP (ARRAY I J)
;;                `(ROTATEF (AREF ,ARRAY ,I) (AREF ,ARRAY ,J))))
;;     (LOOP :NAMED PARTITION-LOOP
;;        :FOR  I           :OF-TYPE FIXNUM :FROM FROM :BELOW TO
;;        :WITH J           :OF-TYPE FIXNUM := FROM
;;        :WITH PIVOT-INDEX :OF-TYPE FIXNUM := (RANDOM-IN FROM TO)
;;        :WITH PIVOT       :OF-TYPE FIXNUM := (AREF ARRAY PIVOT-INDEX)
;;        :INITIALLY
;;          (SWAP ARRAY PIVOT-INDEX (1- TO))
;;        :WHEN (< (AREF ARRAY I) PIVOT)
;;          :DO (SWAP ARRAY I J)
;;              (INCF J)
;;        :FINALLY
;;          (SWAP ARRAY J (1- TO))
;;          (RETURN-FROM PARTITION-LOOP J))))

;; (DEFUN QUICKSORT-IN (ARRAY FROM TO)
;;   (WHEN (< 1 (- TO FROM))
;;     (LET ((PIVOT-INDEX (PARTITION ARRAY FROM TO))) 
;;       (QUICKSORT-IN ARRAY FROM PIVOT-INDEX)
;;       (QUICKSORT-IN ARRAY (1+ PIVOT-INDEX) TO))))

(DEFUN BENCH ()
  (DOTIMES (_ 5)
    (LET ((A (MAKE-SAMPLE-ARRAY 1000000)))
      (TIME (QUICKSORT A)))))
    